// <auto-generated />
using System;
using CarRental.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240417165649_test123")]
    partial class test123
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRental.Data.Domain.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a5edc49-7490-493f-2f01-08db8a416485"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2cac2ff-dfc4-4b17-a67e-46533673eda8",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefan",
                            LastName = "Shikov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENY/6VmQXsD6m9+n1hQooLL4AX8GKLN9Dh7cNWaX70E5NCZc9lT7/IXKy0jTeSwfOw==",
                            PhoneNumber = "0988360889",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eeead1f8-954a-42f9-87d9-2d86cc89c992",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("f06d4765-779a-4766-eb64-08db8a42133c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "317cc56d-72c9-4c91-8ed0-2941d3a30b1c",
                            Email = "ivan.ivanov@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN.IVANOV@GMAIL.COM",
                            NormalizedUserName = "IVAN IVANOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEHeoJekJmAU1k5NC/f0PX/6G9xzj4lo7tUK/yDtjesDfX1fZrGSHB/L0aPVy/QDUtw==",
                            PhoneNumber = "0899999999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f8a9134-3d76-40a5-8f11-a0a6adf3f321",
                            TwoFactorEnabled = false,
                            UserName = "Ivan Ivanov"
                        },
                        new
                        {
                            Id = new Guid("f2525385-0162-4b42-8fa5-08db8a43496a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87efbe39-a884-4da7-8def-7b24d73b02ff",
                            Email = "pesho_petrov@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Pesho",
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO_PETROV@YAHOO.COM",
                            NormalizedUserName = "PESHO_PETROV",
                            PasswordHash = "AQAAAAEAACcQAAAAEGfsLSyZPAzke77+fvoJ4dfZJJuAXJmlLb1SvKgqbF/GN9PlKbxEdDoxk9vrD78zWQ==",
                            PhoneNumber = "0877777777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ee57999-7339-42b7-a760-39623319b6cf",
                            TwoFactorEnabled = false,
                            UserName = "pesho_petrov"
                        });
                });

            modelBuilder.Entity("CarRental.Data.Domain.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AccelerationTo100")
                        .HasColumnType("float");

                    b.Property<int>("BodyType")
                        .HasColumnType("int");

                    b.Property<double>("ConsumptionPer100Km")
                        .HasColumnType("float");

                    b.Property<int>("CylindersNumber")
                        .HasColumnType("int");

                    b.Property<int>("Displacement")
                        .HasColumnType("int");

                    b.Property<int>("EngineAspirationType")
                        .HasColumnType("int");

                    b.Property<int>("EngineFuelType")
                        .HasColumnType("int");

                    b.Property<int>("EngineStructureType")
                        .HasColumnType("int");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeakHorsepowerAtRPM")
                        .HasColumnType("int");

                    b.Property<int>("PeakTorqueAtRPM")
                        .HasColumnType("int");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("float");

                    b.Property<Guid?>("RenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SafetyRating")
                        .HasColumnType("float");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("TopSpeed")
                        .HasColumnType("int");

                    b.Property<int>("Torque")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionType")
                        .HasColumnType("int");

                    b.Property<int>("YearOfProduction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RenterId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bdf5c65f-4470-4139-8ec3-8c3baf0e34d6"),
                            AccelerationTo100 = 14.1,
                            BodyType = 2,
                            ConsumptionPer100Km = 6.2999999999999998,
                            CylindersNumber = 4,
                            Displacement = 1300,
                            EngineAspirationType = 0,
                            EngineFuelType = 0,
                            EngineStructureType = 0,
                            Horsepower = 70,
                            ImageURL = "https://parkers-images.bauersecure.com/wp-images/2148/cut-out/930x620/st05.jpg",
                            IsActive = false,
                            Make = "Ford",
                            Mileage = 260000,
                            Model = "Fiesta MK5",
                            PeakHorsepowerAtRPM = 5000,
                            PeakTorqueAtRPM = 2800,
                            PricePerDay = 59.0,
                            SafetyRating = 5.9000000000000004,
                            Seats = 5,
                            TopSpeed = 180,
                            Torque = 106,
                            TransmissionType = 0,
                            YearOfProduction = 2004
                        },
                        new
                        {
                            Id = new Guid("1201c5ee-8aa7-4400-9009-7bfc91fa4817"),
                            AccelerationTo100 = 4.7000000000000002,
                            BodyType = 0,
                            ConsumptionPer100Km = 12.699999999999999,
                            CylindersNumber = 4,
                            Displacement = 2500,
                            EngineAspirationType = 0,
                            EngineFuelType = 0,
                            EngineStructureType = 0,
                            Horsepower = 235,
                            ImageURL = "https://autobild.bg/wp-content/uploads/2021/08/Mercedes-190-E-2.5-16-Evo-II-7.jpg",
                            IsActive = false,
                            Make = "Mercedes",
                            Mileage = 41000,
                            Model = "190E EVO 2",
                            PeakHorsepowerAtRPM = 7200,
                            PeakTorqueAtRPM = 5000,
                            PricePerDay = 2239.9899999999998,
                            SafetyRating = 9.3000000000000007,
                            Seats = 4,
                            TopSpeed = 298,
                            Torque = 245,
                            TransmissionType = 0,
                            YearOfProduction = 1991
                        },
                        new
                        {
                            Id = new Guid("1167ef05-3aaf-4ab8-8032-59d4d6bc2076"),
                            AccelerationTo100 = 9.8000000000000007,
                            BodyType = 0,
                            ConsumptionPer100Km = 7.5,
                            CylindersNumber = 4,
                            Displacement = 2000,
                            EngineAspirationType = 1,
                            EngineFuelType = 3,
                            EngineStructureType = 0,
                            Horsepower = 140,
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/VW_Passat_B7_1.4_TSI_BMT_Trendline_Islandgrau.JPG/1280px-VW_Passat_B7_1.4_TSI_BMT_Trendline_Islandgrau.JPG",
                            IsActive = false,
                            Make = "Volkswagen",
                            Mileage = 120000,
                            Model = "Passat B7",
                            PeakHorsepowerAtRPM = 4200,
                            PeakTorqueAtRPM = 2500,
                            PricePerDay = 99.0,
                            SafetyRating = 7.2000000000000002,
                            Seats = 5,
                            TopSpeed = 211,
                            Torque = 320,
                            TransmissionType = 1,
                            YearOfProduction = 2014
                        },
                        new
                        {
                            Id = new Guid("972f5bfe-0147-48ba-9fa3-a869604e8eb7"),
                            AccelerationTo100 = 6.7999999999999998,
                            BodyType = 3,
                            ConsumptionPer100Km = 7.5999999999999996,
                            CylindersNumber = 4,
                            Displacement = 2000,
                            EngineAspirationType = 0,
                            EngineFuelType = 0,
                            EngineStructureType = 0,
                            Horsepower = 150,
                            ImageURL = "https://i0.shbdn.com/photos/52/19/80/x5_1163521980bds.jpg",
                            IsActive = false,
                            Make = "Renault",
                            Mileage = 340000,
                            Model = "Megane Coach",
                            PeakHorsepowerAtRPM = 6200,
                            PeakTorqueAtRPM = 4200,
                            PricePerDay = 199.99000000000001,
                            SafetyRating = 7.7000000000000002,
                            Seats = 4,
                            TopSpeed = 243,
                            Torque = 190,
                            TransmissionType = 0,
                            YearOfProduction = 1999
                        },
                        new
                        {
                            Id = new Guid("106b584f-2fc0-45ef-985f-ce520e719b3b"),
                            AccelerationTo100 = 5.5,
                            BodyType = 11,
                            ConsumptionPer100Km = 21.600000000000001,
                            CylindersNumber = 8,
                            Displacement = 5500,
                            EngineAspirationType = 2,
                            EngineFuelType = 0,
                            EngineStructureType = 1,
                            Horsepower = 507,
                            ImageURL = "https://www.historics.co.uk/media/1649547/g-wagon-1.jpg?anchor=center&mode=crop&width=1000",
                            IsActive = false,
                            Make = "Mercedes",
                            Mileage = 210000,
                            Model = "G55 AMG",
                            PeakHorsepowerAtRPM = 6100,
                            PeakTorqueAtRPM = 3100,
                            PricePerDay = 499.99000000000001,
                            SafetyRating = 9.6999999999999993,
                            Seats = 5,
                            TopSpeed = 290,
                            Torque = 700,
                            TransmissionType = 1,
                            YearOfProduction = 2009
                        },
                        new
                        {
                            Id = new Guid("2ef90e6c-4356-465d-9389-9f6017b808c3"),
                            AccelerationTo100 = 10.9,
                            BodyType = 2,
                            ConsumptionPer100Km = 3.6000000000000001,
                            CylindersNumber = 4,
                            Displacement = 1800,
                            EngineAspirationType = 0,
                            EngineFuelType = 4,
                            EngineStructureType = 0,
                            Horsepower = 122,
                            ImageURL = "https://www.auto-data.net/images/f15/Toyota-Corolla-XII_1.jpg",
                            IsActive = false,
                            Make = "Toyota",
                            Mileage = 76000,
                            Model = "Corolla",
                            PeakHorsepowerAtRPM = 5200,
                            PeakTorqueAtRPM = 3600,
                            PricePerDay = 79.989999999999995,
                            SafetyRating = 6.7000000000000002,
                            Seats = 5,
                            TopSpeed = 180,
                            Torque = 142,
                            TransmissionType = 1,
                            YearOfProduction = 2019
                        },
                        new
                        {
                            Id = new Guid("2c4f96ad-c259-4494-aec1-d16085794319"),
                            AccelerationTo100 = 4.9000000000000004,
                            BodyType = 0,
                            ConsumptionPer100Km = 13.4,
                            CylindersNumber = 8,
                            Displacement = 6000,
                            EngineAspirationType = 0,
                            EngineFuelType = 0,
                            EngineStructureType = 1,
                            Horsepower = 381,
                            ImageURL = "https://i0.wp.com/www.klasikotom.com/wp-content/uploads/2019/10/W124-E60-AMG-Mercedes-Benz-Tarihcesi-motor-teknik-ozellikleri-nedir-nasil-nasildir-kps.jpg?fit=639%2C369&ssl=1",
                            IsActive = false,
                            Make = "Mercedes",
                            Mileage = 33000,
                            Model = "E60 AMG",
                            PeakHorsepowerAtRPM = 5500,
                            PeakTorqueAtRPM = 3750,
                            PricePerDay = 1089.99,
                            SafetyRating = 9.3000000000000007,
                            Seats = 4,
                            TopSpeed = 324,
                            Torque = 580,
                            TransmissionType = 1,
                            YearOfProduction = 1994
                        },
                        new
                        {
                            Id = new Guid("4fd8c3e0-5b21-44e1-8d0c-b6cae13ad9e2"),
                            AccelerationTo100 = 5.9000000000000004,
                            BodyType = 0,
                            ConsumptionPer100Km = 15.4,
                            CylindersNumber = 12,
                            Displacement = 6000,
                            EngineAspirationType = 0,
                            EngineFuelType = 0,
                            EngineStructureType = 1,
                            Horsepower = 408,
                            ImageURL = "https://business-car-rent.net/wp-content/uploads/2021/03/mercedes-benz-w140-s600-kaban-brabus-mersedes-dlya-kino-na-semki-bez-voditelya-na-prokat-brabus-mers-kiev-10-1.jpg",
                            IsActive = false,
                            Make = "Mercedes",
                            Mileage = 59000,
                            Model = "S600 SEL",
                            PeakHorsepowerAtRPM = 5200,
                            PeakTorqueAtRPM = 3800,
                            PricePerDay = 889.99000000000001,
                            SafetyRating = 9.6999999999999993,
                            Seats = 5,
                            TopSpeed = 308,
                            Torque = 580,
                            TransmissionType = 1,
                            YearOfProduction = 1998
                        });
                });

            modelBuilder.Entity("CarRental.Data.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StarsRating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df0bd291-45c5-4ac0-a927-27b27ddbd821"),
                            CreatedOn = new DateTime(2024, 4, 17, 19, 56, 49, 351, DateTimeKind.Local).AddTicks(5137),
                            CreatorId = new Guid("f2525385-0162-4b42-8fa5-08db8a43496a"),
                            Description = "Exceptional service from Fast Lane Car Rental! The rental process was seamless, and the car exceeded my expectations. Will definitely be using their services again!",
                            StarsRating = 5,
                            Title = "Reccomend it!"
                        },
                        new
                        {
                            Id = new Guid("9bdc6a38-e9f4-4cdf-8b9e-b329e0f0233c"),
                            CreatedOn = new DateTime(2024, 4, 17, 19, 56, 49, 351, DateTimeKind.Local).AddTicks(5178),
                            CreatorId = new Guid("f06d4765-779a-4766-eb64-08db8a42133c"),
                            Description = "Fast Lane Car Rental made my trip an absolute breeze! Their extensive selection of vehicles ensured I found the perfect ride for my adventure. The seamless rental process and friendly staff made the experience top-notch. Highly recommend!",
                            StarsRating = 4,
                            Title = "The best in the business!"
                        },
                        new
                        {
                            Id = new Guid("6db74b16-8cc7-4709-9fce-9e8a30939efc"),
                            CreatedOn = new DateTime(2024, 4, 17, 19, 56, 49, 351, DateTimeKind.Local).AddTicks(5188),
                            CreatorId = new Guid("8a5edc49-7490-493f-2f01-08db8a416485"),
                            Description = "My experience with Fast Lane Car Rental exceeded all expectations. From booking to drop-off, everything was flawless. The quality of their vehicles and the professionalism of their team truly set them apart. Will definitely be returning for my future rental needs!",
                            StarsRating = 4,
                            Title = "Awesome!"
                        });
                });

            modelBuilder.Entity("CarRental.Data.Domain.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("CarRental.Data.Domain.UserRental", b =>
                {
                    b.Property<Guid>("RentalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RentalId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("UserRentals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eba1e76b-c6a4-4d55-96a1-af76b359c115"),
                            ConcurrencyStamp = "ee6e858a-cfdc-48e0-9448-083a4bde31bc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8a5edc49-7490-493f-2f01-08db8a416485"),
                            RoleId = new Guid("eba1e76b-c6a4-4d55-96a1-af76b359c115")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarRental.Data.Domain.Car", b =>
                {
                    b.HasOne("CarRental.Data.Domain.ApplicationUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("CarRental.Data.Domain.Comment", b =>
                {
                    b.HasOne("CarRental.Data.Domain.ApplicationUser", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CarRental.Data.Domain.Rental", b =>
                {
                    b.HasOne("CarRental.Data.Domain.Car", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRental.Data.Domain.UserRental", b =>
                {
                    b.HasOne("CarRental.Data.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Data.Domain.Rental", "Rental")
                        .WithMany("UserRentals")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CarRental.Data.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CarRental.Data.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Data.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CarRental.Data.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Data.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("UserRentals");
                });

            modelBuilder.Entity("CarRental.Data.Domain.Car", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("CarRental.Data.Domain.Rental", b =>
                {
                    b.Navigation("UserRentals");
                });
#pragma warning restore 612, 618
        }
    }
}
